import scipy.misc
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from PIL import Image, ImageOps
import cv2
import os
import PIL
import tensorflow as tf
from tensorflow import keras
import numpy as np

boeing_dir = '/users/programming/Desktop/BoeingAirbus/Boeing'
airbus_dir = '/users/programming/Desktop/BoeingAirbus/Airbus'

'''Airbus/Boeing Classifier made by PaulMcPython18. Please feel free to use this code as inspiration, however I ask that
   you give credit to PaulMcPython18.'''

boeing_data = []
boeing_label = []
airbus_data = []
airbus_label = []


for filename in os.listdir(boeing_dir):
    if filename.endswith(".jpg") or filename.endswith(".png") or filename.endswith(".jpeg"):
        path = os.path.join(boeing_dir, filename)
        im = cv2.imread(path_b)
        im = cv2.cvtColor(im, cv2.COLOR_RGB2GRAY)
        im = cv2.imread(path_b, cv2.IMREAD_GRAYSCALE)
        im = cv2.resize(im, (750, 750))
        boeing_data.append(im)
        boeing_label.append(0)


for filename in os.listdir(airbus_dir):
    if filename.endswith(".jpg") or filename.endswith(".png") or filename.endswith(".jpeg"):
        path = os.path.join(airbus_dir, filename)
        im = cv2.imread(path_b)
        im = cv2.cvtColor(im, cv2.COLOR_RGB2GRAY)
        im = cv2.imread(path_b, cv2.IMREAD_GRAYSCALE)
        im = cv2.resize(im, (750, 750))
        airbus_data.append(im)
        airbus_label.append(1)



training_data = boeing_data + airbus_data
training_label = boeing_label + airbus_label

training_data = np.array(training_data)#.reshape(-1, 750, 750, 1)
training_label = np.asarray(training_label)



model = keras.Sequential([
    tf.keras.layers.Conv1D(32, 3, activation='selu', input_shape=(750, 750)),
    tf.keras.layers.MaxPooling1D(2, 2),
    tf.keras.layers.Conv1D(32, 3, activation='selu'),
    tf.keras.layers.MaxPooling1D(2, 2),
    tf.keras.layers.Conv1D(32, 3, activation='selu'),
    tf.keras.layers.MaxPooling1D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.15),
    tf.keras.layers.Dense(784, activation='selu'),
    tf.keras.layers.Dense(392, activation='selu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(training_data, training_label, epochs=20, batch_size=20, validation_split=0.1, verbose=1)

